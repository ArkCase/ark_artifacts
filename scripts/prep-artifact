#!/bin/bash
set -euo pipefail
. /.functions

set_as_boolean DEBUG
${DEBUG} && set -x

# If we're not explicitly given the name of the file to use as our
# auth table, we use the file in the current directory
set_or_default CURL_AUTH_FILE "curl.auth"
export CURL_AUTH_FULE

usage()
{
	echo -e "usage: ${BASH_SOURCE:-${0}} source targetFile [version]"
	echo -e ""
	echo -e "	The source may be a local path or a curl-compatible URL"
	echo -e "	The target *must* be the local path that the target will be stored as"
	echo -e ""
	exit 1
}

decrypt()
{
	local VALUE="${1}"

	local REQUIRED="false"
	[ ${#} -ge 2 ] && REQUIRED="${2,,}"
	case "${REQUIRED}" in
		true ) REQUIRED="true" ;;
		* ) REQUIRED="false" ;;
	esac

	if "${REQUIRED}" ; then
		[ -v CURL_ENCRYPTION_KEY ] || fail "No CURL_ENCRYPTION_KEY value is set, cannot continue"
		[ -n "${CURL_ENCRYPTION_KEY}" ] || fail "The CURL_ENCRYPTION_KEY value is empty, cannot continue"
	fi

	if [ -v CURL_ENCRYPTION_KEY ] && [ -n "${CURL_ENCRYPTION_KEY}" ] ; then
		local RC=0
		openssl aes-256-cbc \
			-a -A -salt -iter 5 -d \
			-kfile <(echo -n "${CURL_ENCRYPTION_KEY}") 2>/dev/null < <(echo -n "${VALUE}") || RC=${?}
		[ ${RC} -eq 0 ] && return 0
		${REQUIRED} && fail "Failed to decrypt the value (rc=${RC})"
	fi

	# Nothing to decrypt with, or decryption failed but wasn't required
	echo -n "${VALUE}"
	return 0
}

curl_pull()
{
	local URL="${1}"

	# First things first: can we get at it straight up?
	local RC=0
	local HTTP_CODE="$(curl -kLsS --disallow-username-in-url --head "${URL}" -w "%{http_code}" -o /dev/null)" || RC=${?}
	[ ${RC} -eq 0 ] || fail "Failed to query the accessibility for URL [${URL}]"

	# If the HTTP code is above 401, we can't do anything about it...
	local AUTH=""
	if [ ${HTTP_CODE} -ge 400 ] ; then

		# The only one we can do anything about, is 401 ... we can try to authenticate
		[ ${HTTP_CODE} -eq 401 ] || fail "Unable to access URL [${URL}]: HTTP CODE = [${HTTP_CODE}]"

		# If the HTTP code is a 401, best we can do is figure out which auth creds
		# to use when fetching the URL
		#
		# If the file pointed to by the CURL_AUTH_FILE envvar exists and is readable,
		# then that file will be used as a username/password table. The first column
		# is a regex against which the URL will be tested, the second column is the
		# username, and the third column is the password. Columns may be separated by
		# spaces or tabs, since these characters aren't allowed in URLs (must be
		# escaped as either + or %20), and are also not part of the base64 alphabet.
		#
		# Usernames and passwords must be encrypted using the value stored in the
		# CURL_ENCRYPTION_KEY envvar. It is an error to attempt decryption if this
		# variable is not set.
		#
		# The values should be encrypted using a command like so:
		#
		#	$ echo -n "plaintext value" | openssl aes-256-cbc -a -A -salt -iter 5
		#
		# This is an example of what the file may look like (including an example
		# header comment):
		#
		# # Host Regex			Username		Password
		# ^https://myhost.com	U2FsdGVkX1873	rFiEw94/i6WGMnIo
		#
		# The first regex to match will win, and the given credentials will be
		# decrypted and used.
		#
		# Lines whose first non-blank character is a hash (#) will be ignored
		#
		# Line continuation is not supported
		#
		# Empty usernames and passwords aren't supported b/c the encryption
		# algorithm will never produce empty strings.
		#
		local MATCHED="false"
		if [ -f "${CURL_AUTH_FILE}" ] ; then
			while read REGEX USERNAME PASSWORD ; do
				[ -n "${REGEX}" ] || continue
				[ -n "${USERNAME}" ] || continue
				[ -n "${PASSWORD}" ] || continue

				if [[ "${URL}" =~ ${REGEX} ]] ; then
					USERNAME="$(decrypt "${USERNAME}")"
					PASSWORD="$(decrypt "${PASSWORD}" "true")" || fail "Failed to decrypt the password (REGEX = /${REGEX}/)"

					# We will only use them if both are non-empty strings
					if [ -n "${USERNAME}" ] && [ -n "${PASSWORD}" ] ; then
						AUTH="${USERNAME}:${PASSWORD}"
						break
					fi
				fi
			done < <(sed -e '/^\s*#/d' -e '/^\s*$/d' "${CURL_AUTH_FILE}")
		fi

		# If there are no matches, then the table is either empty, or
		# non-existent. In this case, the environment variables
		# CURL_USER and CURL_PASSWORD will be used as the credentials,
		# if they're set and non-empty. Decryption will be attempted,
		# and if it fails then the verbatim values will be used.
		if [ -z "${AUTH}" ] && [ -v CURL_USERNAME ] && [ -n "${CURL_USERNAME:-""}" ] ; then
			USERNAME="$(decrypt "${CURL_USERNAME}")"
			PASSWORD="$(decrypt "${CURL_PASSWORD:-""}")"
			AUTH="${USERNAME}:${PASSWORD}"
		fi
	fi
	[ -z "${AUTH}" ] || AUTH="--user \"${AUTH}\""
	curl -kLsS --disallow-username-in-url --fail --config <(echo "${AUTH}") "${URL}"
}

pull()
{
	local URL="${1}"
	if [[ "${URL,,}" =~ ^[-a-zA-Z0-9_.]+(:[-a-zA-Z0-9_.]+){2,4}$ ]] ; then
		# This is a Maven pull, so use mvn-get
		# TODO: How to output the artifact to stdout? Better off just using mvn-get...
		:
	elif [[ "${URL,,}" =~ ^[a-z][-+.a-z0-9]*:// ]] ; then
		# It's a URL, so pull it with CURL
		curl_pull "${URL}"
	else
		# Check to see if the path it points to is viable
		[ -e "${URL}" ] || fail "The source file [${URL}] does not exist"
		[ -f "${URL}" ] || fail "The source path [${URL}] is not a regular file"
		[ -r "${URL}" ] || fail "The source file [${URL}] is not readable"

		# Sanitize the path
		FILE="$(readlink -f "${URL}")" || fail "Could not locate the file [${URL}]"

		# Output the path's contents
		cat "${FILE}"
	fi
}

save_target()
{
	local TGT="${1}"
	local VER="${2}"
	tee --output-error=exit "${TGT}" || return ${?}
	[ -n "${VER}" ] || return 0
	echo -n "${VER}" > "${TGT}.ver"
}

render_sum()
{
	local SUM="${1}"
	read SHA256 REST < <(sha256sum) || true
	echo -n "${SHA256}" > "${SUM}"
}

[ ${#} -ge 2 ] || usage
[ ${#} -le 3 ] || usage

SRC="${1}"
[ -n "${SRC}" ] || fail "The source may not be an empty string"
TGT="${2}"
[ -n "${TGT}" ] || fail "The target file may not be an empty string"
VER="${3:-""}"
[ -n "${VER}" ] || VER="(unknown)"

SUM="${TGT}.sum"

DIR="$(dirname "${TGT}")"
[ -d "${DIR}" ] || mkdir -p "${DIR}"

say "Starting deployment of [${SRC}] as [${TGT}]..."
pull "${SRC}" | save_target "${TGT}" "${VER}" | render_sum "${SUM}"
RC=("${PIPESTATUS[@]}")

[ ${RC[0]} -eq 0 ] || fail "\tFailed to retrieve the source file from [${SRC}]:\n$(cat "${TGT}")"
[ ${RC[1]} -eq 0 ] || fail "\tFailed to store the retrieved file into [${TGT}]"
[ ${RC[2]} -eq 0 ] || fail "\tFailed to compute the retrieved file's checksum into [${SUM}]"

say "Deployment complete"
exit 0
