#!/usr/bin/python3

import argparse
import concurrent.futures
import copy
import errno
import json
import logging
import os
import random
import string
import subprocess
import sys
import tempfile
import urllib.parse
import yaml
from types import SimpleNamespace

MIN_THREADS = 0
DEF_THREADS = 10
MAX_THREADS = DEF_THREADS * 3

DEFAULT_SOURCE_FILE = "artifacts.yaml"
DEFAULT_FILE_DIR = "."

KEY_AUTHENTICATION = "authentication"
KEY_CREDENTIALS = "credentials"
KEY_ENABLED = "enabled"
KEY_MAVEN = "maven"
KEY_DIRECT = "direct"
KEY_DOWNLOAD = "download"
KEY_ARTIFACTS = "artifacts"
KEY_USERNAME = "username"
KEY_PASSWORD = "password"
KEY_PASSWORD_VAR = "password-var"
KEY_REPOSITORY = "repository"
KEY_GROUP = "group"
KEY_ARTIFACT = "artifact"
KEY_VERSION = "version"
KEY_TYPE = "type"
KEY_CLASSIFIER = "classifier"
KEY_URL = "url"

ENV_ARTIFACTS_CONF = "ARTIFACTS_CONF"
ENV_ARTIFACTS_DEBUG = "ARTIFACTS_DEBUG"
ENV_ARTIFACTS_SIMULATE = "ARTIFACTS_SIMULATE"
ENV_ARTIFACTS_THREADS = "ARTIFACTS_THREADS"
ENV_PREFIX_MAVEN = "MVN_GET"
ENV_PREFIX_DIRECT = "CURL"
ENV_ENCRYPTION_KEY = "%s_ENCRYPTION_KEY"
ENV_USERNAME = "%s_USERNAME"
ENV_PASSWORD = "%s_PASSWORD"

ENV_FILE_DIR = "FILE_DIR"

ENV_MAVEN_SERVER_ID = f"{ENV_PREFIX_MAVEN}_SERVER_ID"

def log_ok(msg):
	logging.info(f"‚úÖ {msg}")

def log_warn(msg):
	logging.warning(f"‚ö†Ô∏è {msg}")

def log_err(msg):
	logging.error(f"‚ùå {msg}")

def fail(msg, code = 1):
	log_err(msg)
	os._exit(code)

def sanitize_path(path):
	# This makes things simpler
	parts = path.split("/")

	# This will not have a leading or trailing slash
	return "/".join(list(filter(lambda x: (x and (x != ".") and (x != "..")), parts)))

parser = argparse.ArgumentParser(description="Artifact Downloader")
parser.add_argument("config", metavar="config", action="store", help=f"The configuration to use (if not given, it will be read from the {ENV_ARTIFACTS_CONF} environment variable)", type=str, nargs="?")
parser.add_argument("--filedir", metavar="file_dir", action="store", help=f"When set, will set the base directory into which the artifacts will be downloaded (if not given, the value from the  {ENV_FILE_DIR} environment variable will be used)", type=str, nargs=1)
parser.add_argument("--threads", metavar="secrets", action="store", help=f"The number of threads to use when downloading artifacts (if not given, it will be read from the {ENV_ARTIFACTS_THREADS} environment variable)", type=int, nargs=1)
parser.add_argument("--debug", metavar="debug", action="store_const", const=True, help=f"When set, increases debugging output (if not given, it will be recomputedad from the {ENV_ARTIFACTS_DEBUG} environment variable)")
parser.add_argument("--simulate", metavar="simulate", action="store_const", const=True, help=f"When set, will only output the details about the work that would be done, without doing it (if not given, it will be computed from the {ENV_ARTIFACTS_SIMULATE} environment variable)")

args = parser.parse_args()

log_level = logging.INFO
if args.debug:
	log_level = logging.DEBUG

logging.basicConfig(level=log_level, format = '%(asctime)s - %(threadName)-10s - %(levelname)-8s - %(message)s')

BASE_DIR = os.path.realpath(os.path.dirname(sys.argv[0]))

FILE_DIR = None
if args.filedir:
	FILE_DIR = args.filedir[0]
elif ENV_FILE_DIR in os.environ:
	FILE_DIR = os.environ[ENV_FILE_DIR]

if not FILE_DIR:
	FILE_DIR = DEFAULT_FILE_DIR

if not os.path.exists(FILE_DIR):
	try:
		os.mkdir(FILE_DIR)
	except Exception as e:
		fail(f"Failed to create the missing file directory [{FILE_DIR}]: {e}")

if not os.path.isdir(FILE_DIR):
	fail(f"The path [{FILE_DIR}] is not a valid directory")

if not os.access(FILE_DIR, os.R_OK|os.W_OK|os.X_OK):
	fail(f"The path [{FILE_DIR}] is not fully accessible to the current user (rwX)")

REAL_FILE_DIR = os.path.realpath(FILE_DIR)

if FILE_DIR != REAL_FILE_DIR:
	logging.info(f"Resolved the target directory [{FILE_DIR}] as [{REAL_FILE_DIR}]")
	FILE_DIR = REAL_FILE_DIR

logging.info(f"Will download all artifacts into [{FILE_DIR}]")

if args.config:
	source_file = args.config
	source_file_is_file = True
elif ENV_ARTIFACTS_CONF in os.environ:
	source_file = os.environ[ENV_ARTIFACTS_CONF]
	source_file_is_file = False
else:
	source_file = DEFAULT_SOURCE_FILE
	source_file_is_file = True

# Handle STDIN
if source_file == "-":
	source_file = sys.stdin
	source_file_is_file = False

total_threads = DEF_THREADS
if args.threads:
	total_threads = args.threads[0]
	if total_threads < MIN_THREADS:
		total_threads = MIN_THREADS
	elif total_threads > MAX_THREADS:
		total_threads = MAX_THREADS

# Load the configuration
if source_file_is_file:
	if not os.path.isfile(source_file):
		fail(f"The path [{source_file}] is not a valid file")
	if not os.access(source_file, os.R_OK):
		fail(f"The file [{source_file}] is not readable by the current user")
	logging.info(f"üíæ Loading the configuration from the file [{source_file}]...")
	try:
		with open(source_file, "r") as f:
			config_file = f.read()
	except Exception as e:
		fail(f"Failed to open the configuration file [{source_file}] for reading: {e}")
else:
	config_file = source_file
	if type(source_file) == str:
		logging.info(f"üßæ Parsing the configuration from the string: [\n{source_file}\n]...")
		show_data = False
	else:
		logging.info("‚öôÔ∏è Parsing the configuration from stdin...")

CONFIG = {}
try:
	CONFIG = yaml.safe_load(config_file)
except Exception as e:
	log_err(f"Failed to parse the configuration as YAML, will try JSON: {e}")
	CONFIG = None

if CONFIG is None:
	# Yaml parse failed ... try as JSON
	logging.exception("‚ùå Failed to parse the configuration as YAML, will try JSON")
	try:
		if type(config_file) == str:
			CONFIG = json.loads(config_file)
		else:
			CONFIG = json.load(config_file)
	except Exception as e:
		logging.exception("‚ùå Failed to parse the configuration as either YAML or JSON")
		sys.exit(1)

if (not CONFIG) or (type(CONFIG) != dict):
	fail("Bad configuration format: must be a map!")

#
# See if there's any artifact info defined
#
try:
	artifacts = CONFIG[KEY_ARTIFACTS]
except KeyError:
	artifacts = None

if (not artifacts):
	log_warn("No artifacts listed for download")
	sys.exit(0)
elif type(artifacts) != dict:
	fail(f"Bad configuration format: the '{KEY_ARTIFACTS}' element must be a map")

def resolve_vars(value):
	if not value:
		return value
	return os.path.expandvars(value)

def is_enabled(map):
	value = map.get(KEY_ENABLED)
	if (value is None):
		return True
	if isinstance(value, (bool, str)):
		return (str(value).lower().strip() != "false")
	fail(f"Found a non-boolean, non-string value for an 'enabled' flag: [{value}]")

def validate_url(url, support_file = False):
	try:
		r = urllib.parse.urlparse(url)
		if support_file and r.scheme.lower() == "file":
			return all([r.path]) and not any([r.netloc, r.params, r.query, r.fragment])
		return all([r.scheme, r.netloc]) and ((r.port is None) or (r.port > 0))
	except ValueError:
		return False

def parse_credentials_item(name, item):
	if (not item):
		return None

	if (type(item) != dict):
		fail(f"Bad configuration format: the '{KEY_AUTHENTICATION}.{KEY_CREDENTIALS}.{name}' element must be a map")

	# There must be a username and a password
	username = item.get(KEY_USERNAME)
	password_var = item.get(KEY_PASSWORD_VAR)

	if (not username) or (not password_var):
		fail(f"The credentials [{name}] must have non-empty values for '{KEY_USERNAME}' and '{KEY_PASSWORD_VAR}'")

	# This string may be static, or may include ${VAR}
	# interpolations with environment variables
	username = resolve_vars(str(username))
	if not username:
		log_warn(f"The {KEY_USERNAME} from the credentials [{name}] evaluated to empty - this may be a problem")

	# This is the name of the environment variable
	# that contains the password value. It must exist
	# at this point
	password_var = str(password_var)
	if not password_var:
		fail(f"The {KEY_PASSWORD_VAR} from the credentials [{name}] is an empty string - this is not allowed")

	template = f"${{{password_var}}}"
	password = resolve_vars(template)
	if (not password) or (password == template):
		fail(f"The {KEY_PASSWORD_VAR} from the credentials [{name}] (with value '{password_var}') did not resolve to an actual password - this is not allowed")

	return { KEY_USERNAME : username, KEY_PASSWORD : password }

def parse_credentials(map):
	if (not map):
		return {}

	if (type(map) != dict):
		fail(f"Bad configuration format: the '{KEY_AUTHENTICATION}.{KEY_CREDENTIALS}' element must be a map")

	credentials = {}
	for name in map.keys():
		item = parse_credentials_item(name, map[name])
		if item:
			credentials[name] = item

	return credentials

def parse_maven_credentials_item(credentials, name, item):
	if (not item):
		return None

	if (type(item) != dict):
		fail(f"Bad configuration format: the '{KEY_AUTHENTICATION}.{KEY_MAVEN}.{name}' element must be a map")

	credentials_name = item.get(KEY_CREDENTIALS)
	url = item.get(KEY_URL)

	if (not url):
		fail(f"The Maven credentials [{name}] must have non-empty values for '{KEY_URL}'")

	if credentials_name:
		# Make sure the named credentials exist
		if credentials_name in credentials:
			result = copy.copy(credentials[credentials_name])
		else:
			log_warn(f"The Maven credentials [{name}] are not defined in the configuration file - assuming it's a server ID for internal Maven authentication")
			result = { KEY_REPOSITORY : credentials_name }
	else:
		result = {}

	# This string may be static, or may include ${VAR}
	# interpolations with environment variables
	url = resolve_vars(str(url))
	if not url:
		fail(f"The {KEY_URL} from the Maven credentials [{name}] evaluated to empty - this is not allowed")

	# It must also be a valid URL
	if not validate_url(url):
		fail(f"The {KEY_URL} from the Maven credentials [{name}] evaluated to the invalid URL [{url}]")

	result[KEY_URL] = url
	return result

def parse_maven_credentials(credentials, map):
	if (not map):
		return {}

	if (type(map) != dict):
		fail(f"Bad configuration format: the '{KEY_AUTHENTICATION}.{KEY_MAVEN}' element must be a map")

	maven = {}
	for name in map.keys():
		item = parse_maven_credentials_item(credentials, name, map[name])
		if item:
			maven[name] = item

	return maven

def parse_authentication(config):
	#
	# Ok ... so first things first: validate the auth creds
	#
	result = { KEY_CREDENTIALS: {}, KEY_MAVEN: {} }

	#
	# See if there's any auth info defined
	#
	try:
		authentication = config[KEY_AUTHENTICATION]
	except KeyError:
		return result

	if (not authentication):
		authentication = { }
	elif type(authentication) != dict:
		fail(f"Bad configuration format: the '{KEY_AUTHENTICATION}' element must be a map")

	result[KEY_CREDENTIALS] = parse_credentials(authentication.get(KEY_CREDENTIALS))
	result[KEY_MAVEN] = parse_maven_credentials(result[KEY_CREDENTIALS], authentication.get(KEY_MAVEN))
	return result

def get_maven_creds(name):
	return AUTHENTICATION[KEY_MAVEN].get(name)

def get_direct_creds(name):
	return AUTHENTICATION[KEY_CREDENTIALS].get(name)

def get_encryption_key(key_var):
	try:
		key = os.environ[key_var]
		if key:
			return key
	except KeyError:
		pass
	return "".join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(64))

def encrypt_decrypt_value(key, value, encrypt = True):
	mode = "-e"
	if not encrypt:
		mode = "-d"
	# This mirrors what the mvn-get and prep-artifact use for crypto
	cmd = [ "openssl", "aes-256-cbc", "-a", "-A", "-salt", "-iter", "5", mode, "-k", key ]
	result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, input=value.encode())
	if result.returncode != 0:
		raise Exception(f"Cryptography failed (rc={result.returncode}): {result.stderr}")
	return result.stdout.decode()

def encrypt_value(key, value):
	return encrypt_decrypt_value(key, value, True)

def decrypt_value(key, value):
	return encrypt_decrypt_value(key, value, False)

def add_creds_environment(environment, credentials, prefix):
	key_var = ENV_ENCRYPTION_KEY % prefix
	encryption_key = get_encryption_key(key_var)
	environment[key_var] = encryption_key
	environment[ENV_USERNAME % prefix] = encrypt_value(encryption_key, credentials[KEY_USERNAME])
	environment[ENV_PASSWORD % prefix] = encrypt_value(encryption_key, credentials[KEY_PASSWORD])
	return environment

def resolve_target(target):
	full_target = FILE_DIR
	if not full_target:
		full_target = ""
	else:
		full_target += "/"
	full_target += target
	return full_target

def compute_maven_artifact(source):
	artifact = f"{source[KEY_GROUP]}:{source[KEY_ARTIFACT]}"
	version = ""
	type = ""
	classifier = ""

	if KEY_CLASSIFIER in source:
		classifier = f":{source[KEY_CLASSIFIER]}"

	if KEY_TYPE in source:
		type = f":{source[KEY_TYPE]}"
	elif classifier:
		type = ":"

	if KEY_VERSION in source:
		version = f":{source[KEY_VERSION]}"
	elif type:
		version = ":"

	return artifact + version + type + classifier

def compute_maven_command_spec(environment, source, target):
	command = [ "mvn-get" ]

	command.append(compute_maven_artifact(source))

	try:
		repository_name = source[KEY_REPOSITORY]
		credentials = get_maven_creds(repository_name)
		if credentials:
			command.append(credentials[KEY_URL])
			if KEY_USERNAME in credentials:
				environment = add_creds_environment(environment, credentials, ENV_PREFIX_MAVEN)
			elif KEY_REPOSITORY in credentials:
				environment[ENV_MAVEN_SERVER_ID] = credentials[KEY_REPOSITORY]
	except KeyError:
		pass

	command.append(resolve_target(target))

	return SimpleNamespace(command = command, environment = environment)

def compute_direct_url(source):
	url = source[KEY_URL]
	if not validate_url(url, True):
		raise Exception(f"Invalid URL found for a direct-download artifact: [{url}]")
	parsed = urllib.parse.urlparse(url)
	if parsed.scheme.lower() == "file":
		return parsed.path
	return url

def compute_direct_command_spec(environment, source, target):
	command = [ "prep-artifact" ]

	command.append(compute_direct_url(source))

	try:
		credentials_name = source[KEY_CREDENTIALS]
		credentials = get_direct_creds(credentials_name)
		if not credentials:
			raise Exception(f"Non-existent credentials '{credentials_name}' referenced from a direct artifact")
		environment = add_creds_environment(environment, credentials, ENV_PREFIX_DIRECT)
	except KeyError:
		pass

	command.append(resolve_target(target))

	try:
		command.append(source[KEY_VERSION])
	except KeyError:
		pass

	return SimpleNamespace(command = command, environment = environment)

def compute_command_spec(source, target):
	type = source[KEY_DOWNLOAD]
	command_generator = None
	if KEY_MAVEN == type:
		command_generator = compute_maven_command_spec
	if KEY_DIRECT == type:
		command_generator = compute_direct_command_spec
	if not command_generator:
		raise Exception(f"Unknown command type [{type}]")
	return command_generator({}, source, target)

def simulate_process(spec, log):
	logging.info(f"Running this command:\n\n{spec.command}\n\nWith these environment additions:\n\n{yaml.safe_dump(spec.environment)}")
	return SimpleNamespace(returncode=0)

def run_process(spec, log):
	env = os.environ.copy()
	env.update(spec.environment)
	return subprocess.run(spec.command, env=env, stdout=log, stderr=subprocess.STDOUT)

def launch_process(source, target, log):
	spec = compute_command_spec(source, target)
	process = run_process
	if args.simulate:
		process = simulate_process
	return process(spec, log)
	# return run_process(spec, log)

def run_download(spec):
	log = None
	log_path = None

	source = spec.source
	try:
		log_fd, log_path = tempfile.mkstemp(prefix=f"artifact-download.{spec.product}-{spec.category}-{spec.artifact}.", suffix=".tmp")
		with os.fdopen(log_fd) as log:
			logging.info(f"üíæ Downloading {spec.path} (via {spec.source[KEY_DOWNLOAD]})")
			result = launch_process(spec.source, spec.path, log)

		if result.returncode == 0:
			log_ok(f"The artifact {spec.path} was retrieved successfully!")
			return True

		with open(log_path, "r") as log:
			log_err(f"The retrieval for the artifact {spec.path} failed (rc={result.returncode}):\n{log.read()}")
			return False
	except Exception as e:
		log_err(f"Failed to launch the process to download the artifact {spec.path}: {e}")
		return False
	finally:
		if log_path:
			os.remove(log_path)

def parse_and_resolve_values(item, required, supported):
	result = {}

	for name in required:
		val = resolve_vars(item.get(name))
		if not val:
			raise Exception(f"the required key '{name}' is either missing or evaluates to an empty value")
		result[name] = val

	for name in supported:
		if not name in item:
			continue

		val = resolve_vars(item.get(name))
		if not val:
			raise Exception(f"the (optional) key '{name}' is either missing or evaluates to an empty value")
		result[name] = val

	return result

def parse_maven_artifact(maven):
	return parse_and_resolve_values(maven, [ KEY_GROUP, KEY_ARTIFACT ], [ KEY_VERSION, KEY_REPOSITORY, KEY_TYPE, KEY_CLASSIFIER ])

def parse_direct_artifact(direct):
	result = parse_and_resolve_values(direct, [ KEY_URL, KEY_VERSION ], [ KEY_CREDENTIALS ])
	try:
		cred = result[KEY_CREDENTIALS]
		if not cred in AUTHENTICATION[KEY_CREDENTIALS]:
			possible = sorted(AUTHENTICATION[KEY_CREDENTIALS].keys())
			raise Exception(f"Non-existent credentials [{cred}] referenced - must be one of {possible}")
	except KeyError:
		pass
	return result

def parse_artifact(artifact):
	# Must either be a "maven" or "direct" artifact
	result = {}
	type = None
	method = None
	if KEY_MAVEN in artifact:
		type = KEY_MAVEN
		method = parse_maven_artifact
	elif KEY_DIRECT in artifact:
		type = KEY_DIRECT
		method = parse_direct_artifact

	if not method:
		raise Exception("unsupported data structure")

	result = method(artifact[type])
	result[KEY_DOWNLOAD] = type
	return result

def download_all_artifacts(executor):
	jobs = {}
	bad_jobs = 0
	for product_name in sorted(artifacts.keys()):
		if (not product_name):
			log_warn(f"A product was detected with an empty name - this is not allowed!")
			continue

		path = product_name

		product = artifacts[product_name]
		if (not product):
			log_warn(f"The product [{path}] has no artifacts, skipping")
			continue

		if type(product) != dict:
			fail(f"Configuration error: the product [{path}] is not declared as a map")

		if not is_enabled(product):
			log_warn(f"The product [{path}] is disabled, skipping")
			continue

		product_path = path
		for category_name in sorted(product.keys()):
			if (not category_name):
				log_warn(f"A category for the product [{product_path}] was detected with an empty name - this is not allowed!")
				continue

			path = f"{product_path}/{category_name}"

			category = product[category_name]
			if (not category):
				log_warn(f"The category [{path}] has no artifacts, skipping")
				continue

			if type(category) != dict:
				fail(f"Configuration error: the category [{path}] is not declared as a map")

			if not is_enabled(category):
				log_warn(f"The category [{path}] is disabled, skipping")
				continue

			category_path = path
			for artifact_name in sorted(category.keys()):
				if (not artifact_name):
					log_warn(f"An artifact for the category [{category_path}] was detected with an empty name - this is not allowed!")
					continue

				path = f"{category_path}/{artifact_name}"

				artifact = category[artifact_name]
				if (not artifact):
					log_warn(f"The artifact [{path}] has an empty definition, skipping")
					continue

				if type(artifact) != dict:
					fail(f"Configuration error: the artifact [{path}]  is not declared as a map")

				if not is_enabled(artifact):
					log_warn(f"The artifact [{path}] is disabled, skipping")
					continue

				try:
					jobs[path] = SimpleNamespace(path = path, product = product_name, category = category_name, artifact = artifact_name, source = parse_artifact(artifact))
				except Exception as e:
					log_err(f"The artifact configuration for [{path}] is not valid: {e}\n\n{yaml.safe_dump(artifact)}")
					bad_jobs += 1

	if bad_jobs:
		fail(f"Found {bad_jobs} invalid artifact definitions, cannot continue")

	if not jobs:
		log_ok(f"No valid artifact definitions were found")
		return True

	launched = {}
	log_ok(f"Found {len(jobs)} valid artifact definitions:")
	for path in sorted(jobs.keys()):
		spec = jobs[path]
		logging.info(f"üöÄ Launching the {spec.source[KEY_DOWNLOAD]} download for [{path}]")
		launched[path] = executor.submit(run_download, spec)

	status = True
	for artifact in sorted(launched.keys()):
		future = launched[artifact]
		try:
			if not future.result():
				status = False
		except Exception as e:
			status = False
	return status

AUTHENTICATION = parse_authentication(CONFIG)

try:
	logging.info(f"Will download up to {total_threads} artifacts concurrently")
	with concurrent.futures.ThreadPoolExecutor(max_workers=(total_threads), thread_name_prefix="downloader") as executor:
		status = 0
		if download_all_artifacts(executor):
			if args.simulate:
				log_warn("Simulation mode was active, will exit with a non-0 status")
				status = 1
			else:
				log_ok("All artifacts were downloaded successfully")
		else:
			log_err("Failed to download all artifacts")
			status = 1
		sys.exit(status)
except KeyboardInterrupt:
	fail("Aborted")