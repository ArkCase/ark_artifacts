#!/bin/bash

set -euo pipefail

timestamp() {
	/usr/bin/date -Ins -u
}

say() {
	echo -e "$(timestamp): ${@}"
}

fail() {
	say "❌ ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

cleanup() {
	if [ -v WORK_DIR ] ; then
		[ -d "${WORK_DIR}" ] && /usr/bin/rm -rf "${WORK_DIR}" &>/dev/null
	fi
}

usage() {
	{
		echo -e "usage: ${BASH_SOURCE:-${0}} spec1 [spec2 spec3 ... specN]"
		echo -e ""
		echo -e "\tArtifact specs are of the form artifact[@repo]=target"
		echo -e ""
		echo -e "\t\tartifact: groupId:artifactId:version[:packaging[:classifier]]"
		echo -e "\t\trepo:     URL to the Maven repository housing the artifact (optional)"
		echo -e "\t\ttarget:   The final path where the file will be copied into"
		echo -e ""
	} 1>&2
	exit 1
}

[ ${#} -ge 1 ] || usage

MVN="$(type -P mvn)" || fail "Maven is not in the path"

WORK_DIR="$(/usr/bin/mktemp -d -p "${PWD}" ".mvn-tmp.XXXXXX")" || fail "Failed to create the temporary work directory"
trap cleanup EXIT

M2_DIR="${WORK_DIR}/m2"
INT_DIR="${WORK_DIR}/int"

LOCAL=(-Dmaven.repo.local="${M2_DIR}")

# Each parameter is of the form artifact[@repo]=target
for n in "${@}" ; do
	# TODO: Split the repo from the artifact

	[[ "${n}" =~ ^([^@=[:space:]]+)(@([^=[:space:]]*))?=(.+)$ ]] || fail "Artifact spec [${n}] is not valid"
	ARTIFACT="${BASH_REMATCH[1]}"
	REPOSITORY="${BASH_REMATCH[3]}"
	DEST="${BASH_REMATCH[4]}"

	[[ "${ARTIFACT}" =~ ^([^:[:space:]]+):([^:[:space:]]+):([^:[:space:]]+)(:([^:[:space:]]+)(:([^:[:space:]]+))?)?$ ]] || fail "The artifact string [${ARTIFACT}] is not valid"
	GROUP_ID="${BASH_REMATCH[1]}"
	ARTIFACT_ID="${BASH_REMATCH[2]}"
	VERSION="${BASH_REMATCH[3]}"
	PACKAGING="${BASH_REMATCH[5]}"
	CLASSIFIER="${BASH_REMATCH[7]}"

	REPO=()
	REPO_MSG=""
	if [ -n "${REPOSITORY}" ] ; then
		REPO=(-DremoteRepositories="${REPOSITORY}")
		REPO_MSG=" from repository [${REPOSITORY}]"
	fi

	say "👉 Downloading [${ARTIFACT}]${REPO_MSG}"
	say "\tGroupId:    ${GROUP_ID}"
	say "\tArtifactId: ${ARTIFACT_ID}"
	say "\tVersion:    ${VERSION}"
	[ -z "${PACKAGING}" ] || say "\tPackaging:  ${PACKAGING}"
	[ -z "${CLASSIFIER}" ] || say "\tClassifier: ${CLASSIFIER}"

	"${MVN}" -e -q -U "${LOCAL[@]}" dependency:get -Dartifact="${ARTIFACT}" "${REPO[@]}" -Dtransitive=false || fail "Failed to download [${ARTIFACT}]${REPO_MSG}"
	say "\t✅ Download complete!"

	ARTIFACT_PATH="${GROUP_ID//.//}/${ARTIFACT_ID}/${VERSION}"
	say "👉 Removing remote repository references from [${M2_DIR}]..."
	/usr/bin/find "${ARTIFACT_PATH}" -name "_remote.repositories" -exec /usr/bin/rm -f '{}' ';' || true

	say "👉 Copying [${ARTIFACT}] into its final location at [${DEST}]..."
	"${MVN}" -q "${LOCAL[@]}" dependency:copy -Dartifact="${ARTIFACT}" -DoutputDirectory="${INT_DIR}" -Dmdep.stripClassifier=true -Dmdep.stripVersion=true -Dmdep.useBaseVersion=true -DoutputAbsoluteArtifactFilename=true || (
		set -euo pipefail
		say "\t⚠️ Maven Copy failed - will try a manual copy"
		FILE="$(/usr/bin/find "${M2_DIR}/${ARTIFACT_PATH}" -type f -name "${ARTIFACT_ID}-${VERSION}*" -not -name "*.lastUpdated" -not -name "*.sha1" -not -name "*.pom")"
		[ -n "${FILE}" ] && [ -e "${FILE}" ] || exit 1
		/usr/bin/cp -f "${FILE}" "${INT_DIR}"
		say "\t✅ Manual copy succeeded!"
	) || fail "Failed to copy [${ARTIFACT}] into the work directory"

	SRC_FILE="$(/usr/bin/find "${INT_DIR}" -type f | /usr/bin/sort | /usr/bin/head -1)"
	SRC_FILE_NAME="${SRC_FILE##*/}"
	say "\t👉 Intermediate copy... (${SRC_FILE_NAME})"

	DEST_DIR="$(/usr/bin/dirname "${DEST}")"
	DEST_NAME="$(/usr/bin/basename "${DEST}")"
	[ -d "${DEST_DIR}" ] || mkdir -p "${DEST_DIR}" &>/dev/null || fail "Failed to create the destination directory [${DEST_DIR}]"
	DEST_DIR="$(/usr/bin/readlink -f "${DEST_DIR}")"

	DEST="${DEST_DIR}/${DEST_NAME}"

	# If the destination already exists, then ... if it's a directory, we must append the artifact's filename
	# if it's a file, we use the filename as-is
	if [ -e "${DEST}" ] ; then
		[ -d "${DEST}" ] && DEST+="/${SRC_FILE_NAME}"
	fi

	/usr/bin/mv -f "${SRC_FILE}" "${DEST}" || fail "Failed to copy [${ARTIFACT}] into [${DEST}]"
	say "\t👉 Rendering helpers..."
	/usr/local/bin/render-helpers "${DEST}" "${VERSION}" || fail "Failed to render the helpers for [${DEST}]"
	say "\t✅ Copy complete! Final file: [${DEST}]"
done
