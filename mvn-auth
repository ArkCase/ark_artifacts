#!/bin/bash
SCRIPT="$(/usr/bin/readlink -f "${0}")"
BASEDIR="$(/usr/bin/dirname "${SCRIPT}")"
SCRIPT="$(/usr/bin/basename "${SCRIPT}")"

################################################################################
# This is an example of mvn-auth.conf
################################################################################
#
# <?xml version="1.0" encoding="utf-8"?>
# <mvn-get>
#     <server>
#         <id>repoId</id>
#         <url>https://some-url-location</url>
#         <username>myUserName</username>
#         <password>myPassword</password>
#     </server>
#     <server>
#         <!-- ... -->
#     </server>
# </mvn-get>
#
################################################################################

set -euo pipefail

timestamp()
{
	/usr/bin/date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

warn()
{
	say "⚠️ WARNING: ${@}"
}

err()
{
	say "❌ ERROR: ${@}" 1>&2
}

fail()
{
	say "❌ ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

usage()
{
	{
		echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} (get repoId | show) [sourceFile] | (encrypt|decrypt) valueToProcess"
		echo -e ""
		echo -e "\tget repoId:"
		echo -e "\t\tProduces two columns of output, separated by a single space:"
		echo -e "\t\t- the username:password combination (decrypted), encoded in base64"
		echo -e "\t\t- the repository's URL"
		echo -e ""
		echo -e "\tshow:"
		echo -e "\t\tList the authentication data available, without decryption (i.e. for caching)"
		echo -e ""
		echo -e "\t[sourceFile]: (optional)"
		echo -e "\t\tThe file from which to read the configurations. If not given,"
		echo -e "\t\tthe default will be './mvn-auth.conf'. If '-' is used, then"
		echo -e "\t\tthe data will be read from STDIN. Can also be set via the"
		echo -e "\t\tenvironment variable MVN_AUTH_CONF."
		echo -e ""
		echo -e "\tencrypt valueToProcess:"
		echo -e "\tdecrypt valueToProcess:"
		echo -e "\t\tEncrypt/decrypt the given value using the key specified via the"
		echo -e "\t\tenvironment variable MVN_AUTH_KEY (which cannot be an"
		echo -e "\t\tempty string, or the process will fail)"
	} 1>&2
	exit 1
}

load_conf()
{
	local CONF="${1}"
	[ -n "${CONF}" ] || fail "The configuration location must not be an empty string"
	case "${CONF}" in
		- ) /usr/bin/cat ;;
		* )	[ -e "${CONF}" ] || return 1
			[ -f "${CONF}" ] || return 1
			[ -r "${CONF}" ] || return 1
			/usr/bin/cat "${CONF}"
			;;
	esac
	return 0
}

get_value()
{
	local VALUE="${1}"
	local ID="${2}"
	"${XMLSTARLET}" sel -t -v "/mvn-get/server[id = \"${ID}\"]/${VALUE}" <<< "${MVN_AUTH_CONF}"
}

encrypt()
{
	local VALUE="${1}"

	local REQUIRED="false"
	[ ${#} -ge 2 ] && REQUIRED="${2,,}"
	case "${REQUIRED}" in
		true ) REQUIRED="true" ;;
		* ) REQUIRED="false" ;;
	esac

	if "${REQUIRED}" ; then
		[ -v MVN_AUTH_KEY ] || fail "No MVN_AUTH_KEY value is set, cannot continue"
		[ -n "${MVN_AUTH_KEY}" ] || fail "The MVN_AUTH_KEY value is empty, cannot continue"
	fi

	if [ -v MVN_AUTH_KEY ] && [ -n "${MVN_AUTH_KEY}" ] ; then
		local RC=0
		openssl aes-256-cbc \
			-a -A -salt -iter 5 \
			-kfile <(echo -n "${MVN_AUTH_KEY}") 2>/dev/null < <(echo -n "${VALUE}") || RC=${?}
		[ ${RC} -eq 0 ] && return 0
		${REQUIRED} && fail "Failed to decrypt the value (rc=${RC})"
	fi

	# Nothing to decrypt with, or decryption failed but wasn't required
	echo -n "${VALUE}"
	return 0
}

decrypt()
{
	local VALUE="${1}"

	local REQUIRED="false"
	[ ${#} -ge 2 ] && REQUIRED="${2,,}"
	case "${REQUIRED}" in
		true ) REQUIRED="true" ;;
		* ) REQUIRED="false" ;;
	esac

	if "${REQUIRED}" ; then
		[ -v MVN_AUTH_KEY ] || fail "No MVN_AUTH_KEY value is set, cannot continue"
		[ -n "${MVN_AUTH_KEY}" ] || fail "The MVN_AUTH_KEY value is empty, cannot continue"
	fi

	if [ -v MVN_AUTH_KEY ] && [ -n "${MVN_AUTH_KEY}" ] ; then
		local RC=0
		openssl aes-256-cbc \
			-a -A -salt -iter 5 -d \
			-kfile <(echo -n "${MVN_AUTH_KEY}") 2>/dev/null < <(echo -n "${VALUE}") || RC=${?}
		[ ${RC} -eq 0 ] && return 0
		${REQUIRED} && fail "Failed to decrypt the value (rc=${RC})"
	fi

	# Nothing to decrypt with, or decryption failed but wasn't required
	echo -n "${VALUE}"
	return 0
}

[ ${#} -ge 1 ] || usage
[ ${#} -le 3 ] || usage

SHOW="false"
GET="false"

if [ ${#} -eq 1 ] ; then
	case "${1,,}" in
		show ) SHOW="true" ;;
	esac
elif [ ${#} -eq 2 ] ; then
	case "${1,,}" in
		show )	MVN_AUTH_CONF="${2}" ; SHOW="true" ;;
		get )	ID="${2}"
				[[ "${ID}" =~ ^[a-zA-Z0-9][-/._a-zA-Z0-9]*$ ]] || fail "The repository ID [${ID}] is invalid"
				GET="true"
				;;
		encrypt | decrypt ) "${1}" "${2}" ; exit ${?} ;;
	esac
elif [ ${#} -eq 3 ] ; then
	case "${1,,}" in
		get )	ID="${2}"
				MVN_AUTH_CONF="${3}"
				[[ "${ID}" =~ ^[a-zA-Z0-9][-/._a-zA-Z0-9]*$ ]] || fail "The repository ID [${ID}] is invalid"
				GET="true"
				;;
	esac
fi

# If we're neither showing nor getting ... we explode!
"${SHOW}" || "${GET}" || usage

[ -v MVN_AUTH_CONF ] || MVN_AUTH_CONF="mvn-auth.conf"

if "${SHOW}" ; then
	load_conf "${MVN_AUTH_CONF}" || true
	exit 0
fi

if "${GET}" ; then
	MVN_AUTH_CONF="$(load_conf "${MVN_AUTH_CONF}")" || warn "No authentication data is available" 1>&2
	XMLSTARLET="$(type -P xmlstarlet)" || fail "xmlstarlet is not installed - cannot proceed"

	get_value "id" "${ID}" &>/dev/null || fail "Repository ID [${ID}] is not defined"

	URL="$(get_value "url" "${ID}")" || fail "Repository ID [${ID}] has no URL!"
	[[ "${URL}" =~ ^https:// ]] || fail "The URL [${URL}] is not supported - only http:// and https:// are supported"
	USERNAME="$(get_value "username" "${ID}")" || USERNAME=""
	PASSWORD="$(get_value "password" "${ID}")" || PASSWORD=""

	USERPASS_64="$(echo -n "$(decrypt "${USERNAME}"):$(decrypt "${PASSWORD}")" | /usr/bin/base64 -w 0)"
	echo "${USERPASS_64} ${URL}"
	exit 0
fi

usage
